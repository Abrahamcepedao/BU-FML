#Character
"my string"
####   LECTURE 1 CODE EXAMPLES #####
#This file introduces basic data types and logical operators in R
#numeric data types: integer, double
348
348.50
#Character
"my string"
#logical
TRUE
FALSE
#Arithmetic Operators work as in other programming languages
42 + 1 * 2 ^ 4
#Order of operations is preserved
( (42 + 1) * 2 )^4
# Logical Operators and comparison
# | is element-wise OR, & is element-wise AND
c(TRUE,FALSE,TRUE) | c(FALSE,TRUE,TRUE)
c(TRUE,FALSE,TRUE) & c(FALSE,TRUE,TRUE)
#vs. single element OR ||, and AND && - only uses first element
c(TRUE,FALSE,TRUE) || c(FALSE,TRUE,TRUE)
c(TRUE,FALSE,TRUE) && c(FALSE,TRUE,TRUE)
# Greater than and less than as you'd expect
1 + 7 > 7
## && and || just compare single truth values
1 + 7 >= 7 && 6 > 7
1 + 7 >= 7 || 6 > 7
###Testing for Equality
3 == 3
##Testing for Inequality
3 != 3
### VECTORS AND VARIABLES ####
#This file introduces saving values to variables and storing multiple values in a vector
###Variable assignment is <- OR =
##See here for more information on the difference:
#https://stackoverflow.com/questions/6140694/is-there-a-technical-difference-between-and
#Create a numeric variable
my_number = 483
my_number <- 483
###Default to double
typeof(my_number)
###Convert from double to integer
my_int = as.integer(my_number)
###typeof(my_int)
typeof(my_int)
#These different data types are not important when using R
# Since R will convert integers to doubles when needed automatically
# The only time these are important is when passing data to
# an external routine - written in C for example
###Vector data structure
my_vec <- c(1,2,67,-8)
typeof(my_vec)
#Can hold different variables
my_vec <- c(1,2,67,-8,"goat")
typeof(my_vec)
#Get some properties
my_vec <- c(1,2,67,-8)
str(my_vec)
###INDICES START AT 1 IN R
###Slicing and Dicing
#This returns the first element of the vector
my_vec[1]
#Vector indices start at 1 in R so this returns an empty element
my_vec[0]
#You can also pass in multiple indices as a vector
c(2:4)
my_vec[c(2,3)]
my_vec[c(2:4)]
#What does an out of bounds element return?
my_vec[5]
#This syntax assigns new elements to specified locations of the vector
#Note what happens to indices without an element
my_vec[5] = 41.2
my_vec[7] = 33
my_vec
my_vec[6]
##Keep every element of the vector except the 6th entry
my_vec = my_vec[-6]
my_vec
#Everything except the first two entries
my_vec = my_vec[c(-1,-2)]
my_vec
#Can save the indices as a variable before using for slicing
indices = c(2:4)
indices
my_vec[indices]
#What if we remove the character string?
my_vec <- c(1,2,67,-8,"goat")
my_vec = my_vec[1:4]
#Still characters unless converted
typeof(my_vec)
#Conversion to numeric
my_vec = as.numeric(my_vec)
typeof(my_vec)
#Can't convert non-numeric characters to numeric
my_vec <- c(1,2,67,-8,"goat")
my_vec = as.numeric(my_vec)
my_vec
###This gives the path where R is currently looking for files
getwd()
#Save the working directory for later
original_dir = getwd()
original_dir
## Change the path where R is looking for files to another location
setwd("C:/Users/abrahamcepedaoseguera/Documents/BU.nosync/FML/Lecture1/Code_and_Data_Lecture_")
setwd("C:/Users/abrahamcepedaoseguera/Documents/BU.nosync/FML/Lecture1/Code_and_Data_Lecture_1")
setwd("C:\Users\abrahamcepedaoseguera\Documents\BU.nosync\FML\Lecture1\Code_and_Data_Lecture_1")
### WORKING DIRECTORY SETTING AND GETTING ###
#This code example introduces how to setup a directory
#structure
###This gives the path where R is currently looking for files
getwd()
#Save the working directory for later
original_dir = getwd()
original_dir
## Change the path where R is looking for files to another location
setwd("C:/Users/vkr0/Documents/")
### WORKING DIRECTORY SETTING AND GETTING ###
#This code example introduces how to setup a directory
#structure
###This gives the path where R is currently looking for files
getwd()
#Save the working directory for later
original_dir = getwd()
original_dir
## Change the path where R is looking for files to another location
setwd("C:/Users/vkr0/Documents/")
### WORKING DIRECTORY SETTING AND GETTING ###
#This code example introduces how to setup a directory
#structure
###This gives the path where R is currently looking for files
getwd()
#Save the working directory for later
original_dir = getwd()
original_dir
## Change the path where R is looking for files to another location
#setwd("C:/Users/vkr0/Documents/")
getwd()
#must use forward slash or double backslash,
#otherwise R interprets this as a special character
#setwd("C:\Users\vkr0\Documents")
#Reset back to the original working directory
setwd(original_dir)
getwd()
### Reading data into R - make sure the example data is located at this path###
days <- read.csv("Datasets/Example_Data.csv", header = FALSE)
### WORKING DIRECTORY SETTING AND GETTING ###
#This code example introduces how to setup a directory
#structure
###This gives the path where R is currently looking for files
getwd()
#Save the working directory for later
original_dir = getwd()
original_dir
## Change the path where R is looking for files to another location
#setwd("C:/Users/vkr0/Documents/")
getwd()
#must use forward slash or double backslash,
#otherwise R interprets this as a special character
#setwd("C:\Users\vkr0\Documents")
#Reset back to the original working directory
setwd(original_dir)
getwd()
### Reading data into R - make sure the example data is located at this path###
days <- read.csv("Example_Data.csv", header = FALSE)
#Change the column names of the dataset
colnames(days) = paste("Day",seq(1,ncol(days)),sep="_")
### Data with a header
golf = read.csv("GolfBals.csv",header=T)
#Write the dataset back to a csv file without including row names and including quotes
write.csv(golf,file="Datasets/GolfBallsNew.csv",row.names=F,quote=T)
### WORKING DIRECTORY SETTING AND GETTING ###
#This code example introduces how to setup a directory
#structure
###This gives the path where R is currently looking for files
getwd()
#Save the working directory for later
original_dir = getwd()
original_dir
## Change the path where R is looking for files to another location
#setwd("C:/Users/vkr0/Documents/")
getwd()
#must use forward slash or double backslash,
#otherwise R interprets this as a special character
#setwd("C:\Users\vkr0\Documents")
#Reset back to the original working directory
setwd(original_dir)
getwd()
### Reading data into R - make sure the example data is located at this path###
days <- read.csv("Example_Data.csv", header = FALSE)
#Change the column names of the dataset
colnames(days) = paste("Day",seq(1,ncol(days)),sep="_")
### Data with a header
golf = read.csv("GolfBals.csv",header=T)
#Write the dataset back to a csv file without including row names and including quotes
write.csv(golf,file="GolfBallsNew.csv",row.names=F,quote=T)
### INSTALLING PACKAGES ####
###Installs the package from the CRAN mirror (must be connected to the internet)
#Only install the package if we don't already have it installed
if(!require(swirl))
{
install.packages("swirl")
}
if(!require(reader))
{
install.packages("reader")
}
#Library loads the specified package
library(reader)
###Loads the package to be used!
library(swirl)
### To see all installed packages
library()
###Quits out of R and asks if you want to save your workspace
q()
### WORKING DIRECTORY SETTING AND GETTING ###
#This code example introduces how to setup a directory
#structure
###This gives the path where R is currently looking for files
getwd()
### SIMPLE R VISUALIZATIONS ###
### Reading data into R ###
###Change the file path to match your location
days <- read.csv("Example_Data.csv", header = FALSE)
### Data with a header
golf = read.csv("GolfBals.csv",header=T)
###Summary statistics on a particular variable
#Extract just the "distance" variable from a data frame
golf$distance
#Calculate summary statistics on this distance variable
#Mean
mean(golf$distance)
#Median
median(golf$distance)
#Minimum and maximum values
min(golf$distance)
max(golf$distance)
#25th, 50th, and 75th percentile thresholds
quantile(golf$distance)
#Measures of spread - Variance and standard deviation
var(golf$distance)
sd(golf$distance)
###Skewed Mean and median
###Generate a variable with an outlier value
variable = c(rep(30,50),rep(35,30),rep(40,20),rep(45,5),50,55,60,12000)
###Add some random noise to it
variable = variable + runif(length(variable),min=0,max=7)
variable
#variable2 doesn't have the outlier
variable2 = variable[-length(variable)]
###Basic histogram
hist(variable)
hist(variable2)
###Compute the means of the variable
#Heavily affected by the single outlier
mean(variable)
mean(variable2)
###Compute the median - no major effect of the single outlier
median(variable)
median(variable2)
#How does skew affect the mean vs median?
#First generate data with no skew
data = rnorm(50000)
install.packages("sn")
require(sn)
?sn
#Generate data with skew
data2 = rsn(50000,xi=0,omega=5,alpha=20)
?rsn
??rsn
?dsn
### SIMPLE R VISUALIZATIONS ###
### Reading data into R ###
###Change the file path to match your location
days <- read.csv("Example_Data.csv", header = FALSE)
### Data with a header
golf = read.csv("GolfBals.csv",header=T)
###Summary statistics on a particular variable
#Extract just the "distance" variable from a data frame
golf$distance
#Calculate summary statistics on this distance variable
#Mean
mean(golf$distance)
#Median
median(golf$distance)
#Minimum and maximum values
min(golf$distance)
max(golf$distance)
#25th, 50th, and 75th percentile thresholds
quantile(golf$distance)
#Measures of spread - Variance and standard deviation
var(golf$distance)
sd(golf$distance)
###Skewed Mean and median
###Generate a variable with an outlier value
variable = c(rep(30,50),rep(35,30),rep(40,20),rep(45,5),50,55,60,12000)
###Add some random noise to it
variable = variable + runif(length(variable),min=0,max=7)
variable
#variable2 doesn't have the outlier
variable2 = variable[-length(variable)]
###Basic histogram
hist(variable)
hist(variable2)
###Compute the means of the variable
#Heavily affected by the single outlier
mean(variable)
mean(variable2)
###Compute the median - no major effect of the single outlier
median(variable)
median(variable2)
##Class counts
table(golf$brand)
###Pie chart of class counts
pie(table(golf$brand))
###Barplot of class counts
barplot(table(golf$brand))
###Class frequencies
table(golf$brand)/nrow(golf)
prop.table(table(golf$brand))
###Barplot of class frequencies with titles
barplot(table(golf$brand)/nrow(golf),
main="Golf Balls by Brand",
xlab="Brand",
ylab="Frequency")
##Class counts
table(golf$brand)
###Pie chart of class counts
pie(table(golf$brand))
###Barplot of class counts
barplot(table(golf$brand))
###Class frequencies
table(golf$brand)/nrow(golf)
prop.table(table(golf$brand))
###Barplot of class frequencies with titles
barplot(table(golf$brand)/nrow(golf),
main="Golf Balls by Brand",
xlab="Brand",
ylab="Frequency")
#Another package to produce graphs is called ggplot
if(!require(ggplot2))
{
install.packages("ggplot2")
}
#GGplot version
ggplot(data=golf,aes(x=brand,fill=brand)) +
geom_bar() +
theme_bw() +
ggtitle("Golf Balls by Brand") +
xlab("Brand") +
ylab("Frequency")
###Summary of golf data
#Convert the "brand" variable to a character string
golf$brand = as.character(golf$brand)
summary(golf)
####Histogram of golf data
hist(golf$distance)
#Specifying the number of breakpoints to use
hist(golf$distance,breaks=5) #- evenly spaced by default
#Manually specifying the breakpoints themselves
breaks = c(255,265,275,300)
hist(golf$distance,breaks = breaks)
#GGplot version
ggplot(data=golf,aes(x=distance)) +
geom_histogram(breaks=breaks) +
theme_bw()
###Boxplot of golf data
boxplot(golf$distance)
###Ggplot version of the boxplot
ggplot(data = golf,aes(y=distance)) +
geom_boxplot() +
xlim(c(-0.5,0.5)) +
theme_bw() +
annotate("text",x=-0.5,y=285,label="Median")
